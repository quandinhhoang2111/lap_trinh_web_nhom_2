import { orderItemService } from "../../Service/OrderItemService";

export const insertOrder = (body) => async (dispatch) => {
    try {
        console.log("üì¶ ƒêang g·ª≠i order:", body);

        const response = await orderItemService.insertOrder(body);

        console.log("‚úÖ Ph·∫£n h·ªìi t·ª´ server:", response);

        const code = response?.code;

        if (code) {
            dispatch({
                type: "INSERT_ORDER",
                payload: response,
            });
        } else {
            console.warn("‚ö†Ô∏è Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu order.");
        }

        return response;
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:");

        if (error.response?.data?.message) {
            console.error("üß® API Error:", error.response.data.message);
        } else {
            console.error("üß® L·ªói kh√¥ng x√°c ƒë·ªãnh:", error.message);
        }

        throw error; // R·∫•t quan tr·ªçng n·∫øu ph√≠a g·ªçi mu·ªën bi·∫øt l·ªói
    }
};
export const getAllHistoryOrder = (page,size,orderStatus,sort,userId) => async (dispatch) => {
    try {

        const response = await orderItemService.historyOrders({page,size,orderStatus,sort},userId);

        if (response.data) {
            dispatch({
                type: "HISTORY_ORDER",
                payload: response.data,
            });
        } else {
            console.warn("‚ö†Ô∏è Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu order.");
        }

        return response.data;
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:");

        if (error.response?.data?.message) {
            console.error("üß® API Error:", error.response.data.message);
        } else {
            console.error("üß® L·ªói kh√¥ng x√°c ƒë·ªãnh:", error.message);
        }

        throw error; // R·∫•t quan tr·ªçng n·∫øu ph√≠a g·ªçi mu·ªën bi·∫øt l·ªói
    }
};

export const refundOrder = (orderId) => async (dispatch) => {
    try {

        const response = await orderItemService.refund(orderId);

        if (response) {
            dispatch({
                type: "REFUND_ORDER",
                payload: response,
            });
        } else {
            console.warn("‚ö†Ô∏è Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu order.");
        }

        return response;
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:");

        throw error;
    }
};
export const cancelOrder = (orderId) => async (dispatch) => {
    try {

        const response = await orderItemService.cancel(orderId);

        if (response) {
            dispatch({
                type: "CANCEL_ORDER",
                payload: response,
            });
        } else {
            console.warn("‚ö†Ô∏è Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu order.");
        }

        return response;
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:");

        throw error;
    }
};
export const getAllOrders = ( startDate, endDate, orderStatus, paymentMethod, paymentStatus, page, size, sortBy, sortDir) => async (dispatch) => {
    try {
        const response = await orderItemService.adminGetAllOrders(startDate, endDate, orderStatus, paymentMethod, paymentStatus, page, size, sortBy, sortDir);

        if (response.data) {
            dispatch({
                type: "ADMIN_GET_ALL_ORDERS",
                payload: response.data,
            });
        } else {
            console.warn("‚ö†Ô∏è Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu order.");
        }

        return response.data;
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:");

        throw error;
    }
};

export const updateOrderStatus = (orderId, data) => async (dispatch) => {
    try {
        const response = await orderItemService.adminUpdateOrderStatus(orderId, data);

        if (response) {
            dispatch({
                type: "UPDATE_ORDER_STATUS",
                payload: response.code,
            });
        } else {
            console.warn("‚ö†Ô∏è Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu order.");
        }

        return response.code;
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:");

        throw error;
    }
};

export const revenueByMonth = (year) => async (dispatch) => {
    try {
        const response = await orderItemService.revenueByMonth(year);

        if (response) {
            dispatch({
                type: "REVENUE",
                payload: response.data,
            });
        } else {
            console.warn("‚ö†Ô∏è Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu order.");
        }

        return response.data;
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:");

        throw error;
    }
};

export const acceptRefund = (id) => async (dispatch) => {
    try {
        const response = await orderItemService.acceptRefund(id);

        if (response) {
            dispatch({
                type: "ACCEPT_REFUND",
                payload: response.code,
            });
        } else {
            console.warn("‚ö†Ô∏è Server kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu order.");
        }

        return response.code;
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:");

        throw error;
    }
}